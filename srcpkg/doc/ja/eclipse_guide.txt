/*
 *----------------------------------------------------------------------
 *    T-Kernel 2.0 Software Package
 *
 *    Copyright 2011 by T-Engine Forum
 *    This software is distributed under the T-License 2.0.
 *----------------------------------------------------------------------
 *
 *    Released by T-Engine Forum(http://www.t-engine.org/) at 2011/05/17.
 *    Last modified at 2012/11/30 by T-Engine Forum.
 *
 *----------------------------------------------------------------------
 */

==============================================================================
        EclipseによるT-Kernel構築説明書(tef_em1d用)
==============================================================================
------------------------------------------------------------------------------
1. はじめに
------------------------------------------------------------------------------

Eclipseでは、開発対象プログラム群や作業環境を「ワークスペース」 によって切り替
えます。また、開発対象となるプログラムを、「プロジェクト」という単位で管理しま
す。1つの「ワークスペース」に複数の「プロジェクト」を含むことができ、1つの「プ
ロジェクト」の中で複数のオブジェクトをビルドすることができます。

ワークスペースやプロジェクトの名称は、ビルドしたオブジェクトを入れるべきディレ
クトリ(Makefileが入っているディレクトリ)へのパス名の上位部分と同じです。たとえ
ば、

        /XXX/YYY/ZZZ/WWW/VVV/Makefile

のようなパス名で指定されるMakefileがあった場合、 Eclipseを使ってこのMakefileに
よるビルドを行うには、次のような環境設定とします。

        ワークスペース  /XXX/YYY
        プロジェクト    ZZZ

この場合、Eclipseのウィンドウの左袖に表示される「C/C++プロジェクト」のビューの
中に、/XXX/YYY/ZZZ 以下に置かれたディレクトリ群のツリー構造が表示されます。 上
記のMakefileによるビルドを行うには、 その表示の中から WWW/VVV のディレクトリ、
または Makefile を選択した状態で、「Make all」などのメニューを実行します。

以下では、Cygwin システムを c:\cygwin の下に、T-Kernelソースコードを Cygwin 環
境内の /usr/local/tef_em1d の下に展開した場合を例として説明します。 このディレ
クトリを   Windows  のエクスプローラ等から見た場合には、 c:\cygwin\usr\local\
tef_em1d のフォルダになります。

これ以降の設定やプログラムのビルドを行う前に、上記のフォルダでT-Kernelソースコ
ードのパッケージ(tkernel_source.tar.gz)を展開しておいてください。

上記とは異なる場所にソースコードを展開した場合は、それぞれのパスを読み替えてく
ださい。

------------------------------------------------------------------------------
2. Eclipseの起動とワークスペースの設定
------------------------------------------------------------------------------

Eclipseを使ってT-Kernelやその応用システムの開発を行う場合には、 次のワークスペ
ースを使用して、それぞれのオブジェクトファイルを構築します。

  ・ライブラリ
  ・T-Monitor
  ・カーネル(＋デバイスドライバ＋アプリケーション)
  ・設定情報ファイル(config)
  ・デバイスドライバ

そこで、まずこれらのワークスペースの生成と環境設定を行います。具体的な手順は以
下の通りです。

  ※ 他の用途で Eclipse を使用していた場合、新たにインストールしたプラグインの
     認識がうまく行かないことがあります。 その場合は、Windows の「ファイル名を
     指定して実行」の機能を使用し、「c:\eclipse\eclipse.exe -clean」と -clean 
     の引数を指定して一度起動してください。

--------------------------------------------------
2.1 ライブラリ構築用ワークスペースの設定
--------------------------------------------------

Eclipse のショートカット、または「c:\eclipse\eclipse.exe」をダブルクリックして
起動します。しばらくすると「ワークスペースの選択」ダイアログが表示されます。

(1) ワークスペースのディレクトリ設定

まず、ライブラリを構築するためのワークスペースの設定を行います。このワークスペ
ースでは、「ワークスペースの選択」のダイアログにおいて、 次のディレクトリ(フォ
ルダ)を設定します。

        c:\cygwin\usr\local\tef_em1d\tkernel_source\lib

上記のフォルダ名をワークスペースの欄に入力し、「OK」ボタンを押してください。ラ
イブラリ構築用の新しいワークスペースが生成され、「ようこそ」ビューが表示されま
す。

次に、 ウインドウの右方の中ほどにある「ワークベンチ」 のアイコンをクリックし、
「ワークベンチ」を表示します。

  ※ 「ワークベンチ」のアイコンは、 丸の中に反り返った矢印の絵が出ているアイコ
     ンです。 この上にマウスを移動すると、「ワークベンチ」という説明がポップア
     ップして表示されます。

メニューの「ウインドウ」「パースペクティブを開く」「その他」「T-Engine 開発」 
を選択します。

T-Engine の開発作業は、このパースペクティブ上で行います。

(2) ワークスペースの環境設定(T-Engine開発環境)

ワークスペースの環境設定を行います。メニューの「ウインドウ」「設定」を選択し、
「設定」 ダイアログを表示します。 このダイアログの左側の袖に出ている「T-Engine
開発環境」をクリックした後、ダイアログの右側で以下の設定を行ってください。

・Cygwinディレクトリ

cygwin がインストールされているパスを指定します。標準では c:\cygwin ですが、標
準とは異なる場所にインストールしている場合は変更してください。

・外部ツールte_vcom

引数の中で、開発用ホストPCとターゲットを接続するコンソール回線のポートを指定し
ます。以下の例を参考に、ご利用の環境に合わせて設定してください。

        -b -x -l /dev/ttyS0     (開発用ホストPCのCOM1に接続する場合)
        -b -x -l /dev/ttyS1     (開発用ホストPCのCOM2に接続する場合)
                ...
        -b -x -l /dev/ttyS7     (開発用ホストPCのCOM8に接続する場合)

・外部ツールgterm

通常、デフォルトのままで変更不要です。

  ※ この外部ツールの設定はレジストリに記録されるため、 同一ユーザ内で共通に使
     用され、本開発環境を再インストールしても保存されています。

(3) Eclipse環境変数 GNU_BD,GNUARM_2,BD の設定

「設定」 ダイアログの左側の袖に出ている「T-Engine開発環境」の左側の [+] マークを
をクリックした後、表示された tef_em1d.1.1.0 をクリックし、環境変数に以下の内容を
登録してください。

 ・コンパイルとビルドを行うための環境変数 GNU_BD, GNUARM_2 の設定

        名前    GNU_BD
        値      /usr/local/tef_em1d/tool/Cygwin-i686

        名前    GNUARM_2
        値      /usr/local/tef_em1d/tool/Cygwin-i686/arm_2-unknown-tkernel

 ・T-Kernelソースのトップディレクトリを表わす環境変数 BD の設定

        名前    BD
        値      /usr/local/tef_em1d/tkernel_source

※ 具体的なパス名は、各自の環境に合わせて適宜変更してください。

(4) デバッグ時の環境設定

デバッグ時にソースファイルを正しく検索できるようにソースファイルの検索パスを設
定します。「設定」ダイアログの左側の袖の「C/C++」 の左側の [+] マークをクリッ
クし、表示された「デバッグ」の左側の [+] マークをクリックし、さらに「ソース・
ルックアップ・パス」をクリックすると、ダイアログの右側に、ソースを検索する対象
が表示されます。
ソースを検索する対象がいくつか表示されますが、その中の「プロジェクト」が先頭に
ない場合、その「プロジェクト」をクリックして選択した状態としてから、「上へ」ボ
タンを押して、「プロジェクト」が先頭になるようにしてください。

なお、上記の(1)から(3)までの設定は、全てのワークスペースに対して行う必要が
あります。(4)の設定は、デバッグを行うワークスペースのみ行ってください。

--------------------------------------------------
2.2 T-Monitor構築用ワークスペース設定
--------------------------------------------------

T-Monitorを構築するためのワークスペースの設定を行います。

メニューの「ファイル」「ワークスペースの切り替え」「その他」を選択してください。
しばらくすると「ワークスペース・ランチャー」ダイアログが表示されます。

ここで、 T-Monitorを構築するためのワークスペースの設定を行います。「ワークスペ
ース・ランチャー」のダイアログにおいて、次のフォルダを設定します。

        c:\cygwin\usr\local\tef_em1d\tkernel_source\monitor

上記のフォルダ名をワークスペースの欄に入力し、「OK」ボタンを押してください。T-
Monitor構築用の新しいワークスペースが生成され、「ようこそ」 ビューが表示されま
す。

環境設定はワークスペース毎に必要ですが、これ以下の手順はライブラリ構築用のワー
クスペースの場合と同じですので、ここでは省略します。前述の「2.1 ライブラリ構築
用ワークスペースの設定」を参考に、同様の設定を行ってください。

--------------------------------------------------
2.3 カーネル構築用ワークスペース設定
--------------------------------------------------

カーネルを構築するためのワークスペースの設定を行います。手順は前項と同様ですが、
「ワークスペース・ランチャー」のダイアログでは次のフォルダを設定してください。

        c:\cygwin\usr\local\tef_em1d\tkernel_source\kernel

--------------------------------------------------
2.4 設定情報ファイル(config)構築用ワークスペース設定
--------------------------------------------------

設定情報ファイル(config)を構築するためのワークスペースの設定を行います。手順は
前項と同様ですが、「ワークスペース・ランチャー」のダイアログでは次のフォルダを
設定してください。

        c:\cygwin\usr\local\tef_em1d\tkernel_source\config

--------------------------------------------------
2.5 デバイスドライバ構築用ワークスペース設定
--------------------------------------------------

デバイスドライバを構築するためのワークスペースの設定を行います。手順は前項と同
様ですが、「ワークスペース・ランチャー」のダイアログでは次のフォルダを設定して
ください。

        c:\cygwin\usr\local\tef_em1d\tkernel_source\drv

------------------------------------------------------------------------------
3. プログラムのビルド方法
------------------------------------------------------------------------------

Eclipseでは、 開発対象となるプログラムやオブジェクトファイル毎に、プロジェクト
を作成してビルドを行います。プロジェクトは、パッケージを展開したソースコードの
中に既に存在するディレクトリ構造に基づいて作成されます。

本章ではまず、プロジェクトを作成してプログラムをビルドする際の、 Eclipseの一般
的な使い方を説明します。その後、T-Kernelを構築する場合の具体的な手順について説
明します。

--------------------------------------------------
3.1 一般的なビルド方法
--------------------------------------------------

Eclipseによるビルドの際には、次のような環境やパラメータを選択、設定します。

 ・ワークスペース
 ・パースペクティブ
 ・プロジェクト
 ・ビルド先ディレクトリ
 ・ビルド環境

これらの意味と設定方法について説明します。

(1) ワークスペース

開発対象プログラム群や作業環境を切り替える大きな単位です。

メニューの「ファイル」「ワークスペースの切り替え」を選択すると、前の章で設定し
たワークスペースが、選択肢として記録されています。その中から適切なワークスペー
スを選択します。 T-Kernel関係の開発では、次の5種類のワークスペースを切り替えて
使用します。

 ・ライブラリ
        c:\cygwin\usr\local\tef_em1d\tkernel_source\lib

 ・T-Monitor
        c:\cygwin\usr\local\tef_em1d\tkernel_source\monitor

 ・カーネル
        c:\cygwin\usr\local\tef_em1d\tkernel_source\kernel

 ・設定情報ファイル(config)
        c:\cygwin\usr\local\tef_em1d\tkernel_source\config

 ・デバイスドライバ
        c:\cygwin\usr\local\tef_em1d\tkernel_source\drv

(2) パースペクティブ

T-Kernel関係の開発では、「T-Engine 開発」のパースペクティブを使用します。

現在のパースペクティブは、Eclipseのウィンドウの右上に表示されています。 この表
示が「T-Engine  開発」になっていない場合は、メニューの「ウインドウ」「パースペ
クティブを開く」「T-Engine 開発」を選択して、「T-Engine 開発」のパースペクティ
ブにしてください。

(3) プロジェクト

「ワークスペース」よりも小さな単位で、開発対象となるプログラム群を管理するのが
「プロジェクト」です。プロジェクトは次の手順により生成します。

Eclipseのウィンドウの左袖に表示されている「C/C++プロジェクト」のビュー上で、マ
ウスの右ボタンをクリックし、その際に表示されるメニューの「新規」「T-Engine C/C
++プロジェクト」を選択します。

「新規プロジェクト」のダイアログが表示されますので、この中のプロジェクト名の欄
に、生成するプロジェクト名を入力します。プログラムタイプやテンプレートは、必要
に応じて設定しますが、特に指示がなければデフォルトのままとし、「終了」ボタンを
押します。

(4) ビルド先ディレクトリとビルド環境

ビルド先ディレクトリは、ビルド用のMakefileの入ったディレクトリであり、ビルド結
果のオブジェクト等が入るべきディレクトリでもあります。

ビルド環境は、 EclipseのT-Kernel機種別プラグインの名称やバージョンを示す情報で
あり、tef_em1d用の現バージョンでは常に「tef_em1d.1.1.0」を指定します。

ビルド環境を指定する手順は次の通りです。

Eclipseのウィンドウの左袖に表示されている「C/C++プロジェクト」のビューに表示さ
れているディレクトリの中から、ビルド先ディレクトリを探します。この時、必要に応
じて  [+] をクリックし、下位のディレクトリを表示します。以下、そのディレクトリ
の表示されている場所をビルド先ディレクトリ表示と呼びます。

ビルド先ディレクトリ表示の上にマウスを移動し、その上でマウスの右ボタンをクリッ
クし、その際に表示されるメニューの「プロパティ」を選択します。

「プロパティ」のダイアログが表示されますので、その中の「T-Engine関連」を選択す
ると表示される「ビルド環境」を、指定されたものに設定します。

なお、Eclipseを使ってロード、実行、 デバッグなどを行う最終的な実行プログラムを
ビルドする場合には、 「プログラムタイプ」を monitor に設定します。一方、ライブ
ラリやオブジェクトコード、設定情報ファイル(config)などのビルドのみを行う場合は、
「プログラムタイプ」の指定は不要です(空欄のままでよい)。

上記の設定は、ビルド先ディレクトリ毎に、個別に行う必要があります。特に、ビルド
環境の設定(tef_em1d.1.1.0)を行わなかった場合には、正しく動作しませんので、ご注
意ください。

(5) ビルド(通常の場合)

前項までの設定を行った後、ビルド先ディレクトリ表示をマウスでクリックし、選択状
態にします。

その後、ツールバーのメニューから「プロジェクト」「T-Engine Target の Make all」
を選択すると、make が実行され、オブジェクトのビルドが行われます。

また、前項までの設定ができていれば、本項のメニュー選択だけで、ソースプログラム
を修正した後の再ビルドを行うことができます。

(6) ビルド(makeの引数がある場合)

make install のように、ターゲットとなる引数を持った make と同様の処理をEclipse
から行う場合には、次のような設定を行います。

ツールバーのメニューから「プロジェクト」「T-Engine Target の Make...」を選択す
ると、「Make ターゲット」のダイアログが表示されますので、この中の「追加」 ボタ
ンを押します。

「新規 Make ターゲットの作成」のダイアログが表示されますので、次のような設定を
行います。

        ターゲット名            install
        Make ターゲット         install

他の設定はデフォルトのままで、「作成」ボタンを押します。

作成された「install」 を選択し、「ビルド」ボタンを押すことにより、make install
が実行されます。

make install ではなく、make source を実行したい場合は、上記の説明の install を
source に読み替えてください。他の引数を持った場合も同様です。

上記の設定は、ビルド先ディレクトリ毎に、個別に行う必要があります。

--------------------------------------------------
3.2 T-Kernel用ライブラリのビルド
--------------------------------------------------

これ以下では、実際にT-Kernelやライブラリを構築する際の手順について説明します。

T-KernelやT-Monitorの本体を構築する前に、まず、 以下の環境や設定によりT-Kernel
用ライブラリをビルドしてください。具体的な手順は、「3.1 一般的なビルド方法」を
参照してください。既にこのライブラリを構築済の場合は、この手順は不要です。

 ・ワークスペース
        c:\cygwin\usr\local\tef_em1d\tkernel_source\lib

 ・プロジェクト名
        build

 ・ビルド先ディレクトリ
        build/tef_em1d

--------------------------------------------------
3.3 RAMロード用カーネルのビルド
--------------------------------------------------

Eclipseでデバッグするプログラムは、RAM上に置く必要があります。アプリケーション
やデバイスドライバはT-Kernelとリンクされ、 実行時には1つのオブジェクトとなりま
すので、デバッグ対象がアプリケーションであっても、T-Kernelやデバイスドライバを
含めたオブジェクト全体をRAM上で実行する必要があります。

一方、デバッグ終了後の通常実行の際は、一般に、 ROMに書き込まれたT-Kernelとアプ
リケーションを実行します。

RAM上のカーネル(本節ではT-Kernelにアプリケーションやデバイスドライバを含めたも
の、 以下同じ)を実行するか、ROM上のカーネルを実行するかを切り替えるのは、ROMに
書き込まれた設定情報ファイル(rominfo.mot)です。したがって、デバッグ時と、 デバ
ッグ終了後の通常実行時では、ROM上の設定情報ファイルを書き換える必要があります。
設定情報ファイルのビルド手順は次項で説明します。

RAMロード用(デバッグ用)のカーネルは、以下の環境や設定によりビルドしてください。
プロジェクトは、 以下の2つのプロジェクトをこの順に生成してください。また、この
プロジェクトでビルドするオブジェクトは、Eclipseを使ってロード、実行、 デバッグ
などを行う最終的な実行プログラムですので、 「プログラムタイプ」を monitor に設
定してください。具体的な手順は、「3.1 一般的なビルド方法」を参照してください。

 ・ワークスペース
        c:\cygwin\usr\local\tef_em1d\tkernel_source\kernel

 ・プロジェクト名1
        sysmainsmpl

     ※ 「新規プロジェクト」のダイアログ上では、このプロジェクト名を設定するほ
        か、テンプレートを有効にして「sysmainsmpl」を選択してください。

 ・プロジェクト名2
        usermainsmpl

     ※ 「新規プロジェクト」のダイアログ上では、このプロジェクト名を設定するほ
        か、テンプレートを有効にして「usermainsmpl」を選択してください。

 ・ビルド先ディレクトリ
        sysmainsmpl/build/tef_em1d

 ・プログラムタイプ
        monitor

アプリケーションやデバイスドライバとT-Kernelをリンクしたプログラムを開発する場
合にも、上記と同じカーネル構築用のワークスペースを利用し、上記と同様の手順でプ
ログラムのビルドを行います。この場合、別のアプリケーション等に対しては、別のプ
ロジェクト名を付けます。すなわち、上記の「sysmain」の代わりに、 アプリケーショ
ンやプロジェクトに応じた名称を設定し、その名称のディレクトリの下に、関連するプ
ログラムのファイルを置きます。

ユーザプログラムを格納しているプロジェクトの名称「usermainsmpl」を変更した場合
は、sysmainsmpl/src/Makefile.common の

    include ../../../usermainsmpl/Makefile.usermain

のパスを変更してください。また、usermainsmpl/Makefile.usermain の

    VPATH += ../../../usermainsmpl
    HEADER += ../../../usermainsmpl

のパスを変更してください。

--------------------------------------------------
3.4 RAMロード用設定情報ファイルのビルド
--------------------------------------------------

RAMにロードされたカーネルが起動するように設定されたRAMロード用設定情報ファイル
を作成します。 以下の環境や設定により、RAMロード用の設定情報ファイル(config)を
ビルドしてください。具体的な手順は、「3.1 一般的なビルド方法」を参照してくださ
い。

 ・ワークスペース
        c:\cygwin\usr\local\tef_em1d\tkernel_source\config

 ・プロジェクト名
        launch-ramkernel

 ・ビルド先ディレクトリ
        launch-ramkernel/build/tef_em1d

作成した設定情報ファイルの Windows 上のパスは c:\cygwin\usr\local\tef_em1d\
tkernel_source\config\launch-ramkernel\build\tef_em1d\rominfo.mot になります。

ここで作成した設定情報ファイルを、実機のROMに書き込みます。具体的な方法は、
target.txtの「実機へのROMイメージの書き込み」を参照してください。

------------------------------------------------------------------------------
4. 実行とデバッグ
------------------------------------------------------------------------------

T-Engine リファレンスボード (tef_em1d) と開発用ホストPCを接続ケーブル(シリアル)
で接続してください。

また、実行/デバッグ対象は、RAMロード用カーネルですので eclipse のワークスペース
は c:\cygwin\usr\local\tef_em1d\tkernel_source\kernel にしてください。

--------------------------------------------------
4.1 コンソールの準備
--------------------------------------------------

ターゲットと通信を行うため、中継プログラム(te_vcom) とターミナルエミュレータ
(gterm) を起動します。メニューの「実行」「外部ツール」「外部ツールの構成」、ま
たは、ツールバーの外部ツールの▼をクリックし、「外部ツールの構成」をクリックし
ます

表示された「外部ツール構成」ダイアログの「プログラム」の左の+をクリックすると
「te_vcom」と「gterm」の設定が表示されます。設定内容は通常変更する必要はありま
せん。

まずは「te_vcom」を選択し、「実行」してください。Eclipse  ウインドウ下の「コン
ソール」 タブをクリックすると、タブの直下の行(ビューの直上部分)に te_vcom[プロ
グラム] と表示され、te_vcom の動作状態が分かります。

続いて同様の手順で「gterm」を起動してください。コンソールに「gterm」の起動メッ
セージが表示されます。T-Engine リファレンスボードが接続されていて、 プロンプト
が表示されている場合、コンソール上でEnter キーを入力するとプロンプトが表示され
ます。

これらの外部ツールは一度起動すると同じワークスペースであれば、次回からはツール
バーのプルダウンリストにショートカットが表示されますのでショートカットを使って
「te_vcom」→「gterm」の順に起動してください。

--------------------------------------------------
4.2 実行方法
--------------------------------------------------

gterm を起動して、T-Monitor のプロンプト

        TM>

が出た状態にします。

「C/C++プロジェクトビュー」 上で sysmainsmpl/build/tef_em1d/kernel-ram.sysを選
択して、マウス右ボタン「実行」「実行の構成」を選択します。

「実行構成」ダイアログ上の「T-Engineアプリケーション」を選択し、マウス右ボタン
で「新規」を選択します。

「メイン」タブの「実行ファイル」が「build/tef_em1d/kernel-ram.sys」 であること
を確認し、これを全て選択して Ctrl-C でコピーし、「転送ファイル」のテキストボッ
クスに Ctrl-V でペーストします。

さらに、ペースト結果の「.sys」を「.mot」に修正し、「build/tef_em1d/kernel-ram.
mot」とします。これらの操作が終わったら、「実行」ボタンを押します。

コンソール上に以下のような表示が現れ、カーネルが起動し、サンプルのプログラムが
実行されます。 T-Monitor のプロンプトが現れて入力待ちになりますので、「g」を入
力してください。システムが終了します。

        -------------------------------------------
        << Gterm ver 2.49 : 121012 >>

        T-Monitor/tef_em1d Version 2.01.00

        TM> .load /cygdrive/C/cygwin/usr/local/tef_em1d/tkernel_source/kernel/
        sysmainsmpl/build/tef_em1d/kernel-ram.mot
        .. LO XS [/cygdrive/C/cygwin/usr/local/tef_em1d/tkernel_source/kernel/
        sysmainsmpl/build/tef_em1d/kernel-ram.mot: 266800 bytes]
        ....*....*....*....*....*....*....*....*....*....*....*....*.... *....
        *....*....*....*....*....*....*....*....*....*....*....* (4664.7 bytes
        /sec)

        Loaded: 30006074 -> 30020137
        TM> bd

        T-Kernel Version X.XX.XX

        String -> gnirtS
        Push 'g' key to shutdown the T-Kernel.
        TM> g

        << SYSTEM SHUTDOWN >>
        -------------------------------------------

--------------------------------------------------
4.3 デバッグ方法
--------------------------------------------------

実機を起動し、コンソールに T-Monitor のプロンプト

        TM>

が出た状態にします。

「C/C++プロジェクトビュー」 上で sysmainsmpl/build/tef_em1d/kernel-ram.sysを選
択して、マウス右ボタンで「デバッグ」「デバッグの構成」を選択します。前述の実行
を既に行っている場合、「kernel-ram」という設定が残っているはずですので、その設
定を選択します。

前述の実行を行っていない場合は、「デバッグ構成」ダイアログ上の「T-Engine アプ
リケーション」を選択し、マウス右ボタンで「新規」を選択します。

「メイン」タブ「実行ファイル」が「build/tef_em1d/kernel-ram.sys」 であることを
確認し、これを全て選択して Ctrl-C でコピーし、「転送ファイル」のテキストボック
スに Ctrl-V でペーストします。

さらに、ペースト結果の「.sys」を「.mot」に修正し、「build/tef_em1d/kernel-ram.
mot」とします。

「デバッガー」タブを選択し、「始動で停止」を「main」から「usermain」に変更しま
す。

これらの操作が終わったら、「デバッグ」ボタンを押します。

プログラムの転送が行われ、自動的に実行を開始し、usermain の先頭で停止します。

ここで、必要な場所にブレークポイントを設定します。ブレークポイントの設定を行う
には、ソースコードビューの左端でマウス右ボタンを押すと表示される「ブレークポイ
ントの切り替え」を選択してください。

このほか、ステップイン、ステップオーバー、実行再開等のデバッグ機能を利用できま
す。(デバッグビューのタブの右側にこれらの機能のボタンが並んでいます。)

  ※ T-Kernel本体のプログラムについては、 デバッグ情報の付かないオブジェクトコ
     ードになっているため、T-Kernelの内部のデバッグを行うことはできません。 ブ
     レークポイントの設定やソースコードのステップ実行ができるのは、 ユーザの開
     発したアプリケーションです。

usermain の最後には tm_monitor() が呼ばれ、T-Monitor に制御が移るため、 デバッ
ガに制御が戻ります。この時点で「終了」ボタンを押し、デバッガを終了させます。さ
らに、「終了したすべての起動を除去」ボタン(×が二つ並んだボタン)を押し、デバッ
グセッションを終了します。

gterm  コンソール上では、ターゲットの T-Monitor のプロンプト("TM>") が出た状態
になっています。ここで g コマンドを入力すると、T-Kernel が終了します。

------------------------------------------------------------------------------
5. ROM書き込み用プログラムのビルド
------------------------------------------------------------------------------

デバッグ終了後の通常実行の際は、一般に、 ROMに書き込まれたT-Kernelとアプリケー
ションを実行します。

この場合の手順を以下に説明します。

--------------------------------------------------
5.1 ROM用カーネルのビルド
--------------------------------------------------

ROM用のカーネルは、「3.3 RAMロード用カーネルのビルド」を行うと、RAMロード用カ
ーネルとともに生成されます。ファイル名は 「sysmainsmpl/build/tef_em1d/kernel-
rom.mot」になります。

ここで作成されるカーネルはROM上で動作するオブジェクトであり、RAM上では実行でき
ません。そのため、デバッグ用には使えません。

このオブジェクトを実機で動作させるためには T-Monitor または ICE で ROM  に書き
込む必要があります。 具体的な方法は、target.txtの「実機へのROMイメージの書き込
み」を参照してください。

--------------------------------------------------
5.2 設定情報ファイル(config)のビルド
--------------------------------------------------

ROM用のカーネルが起動するように設定された設定情報ファイルを作成します。 以下の
環境や設定により、 ROM用のカーネルに対する設定情報ファイル(config)をビルドして
ください。具体的な手順は、「3.1 一般的なビルド方法」を参照してください。

 ・ワークスペース
        c:\cygwin\usr\local\tef_em1d\tkernel_source\config

 ・プロジェクト名
        build

 ・ビルド先ディレクトリ
        build/tef_em1d

ここで作成した設定情報ファイルを、 実機のROMに書き込みます。  具体的な方法は、
target.txtの「実機へのROMイメージの書き込み」を参照してください。

以上
