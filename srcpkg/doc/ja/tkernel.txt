/*
 *----------------------------------------------------------------------
 *    T-Kernel 2.0 Software Package
 *
 *    Copyright 2011 by Ken Sakamura.
 *    This software is distributed under the T-License 2.0.
 *----------------------------------------------------------------------
 *
 *    Released by T-Engine Forum(http://www.t-engine.org/) at 2011/05/17.
 *
 *----------------------------------------------------------------------
 */

==============================================================================
        T-Kernel 2.0ソースコード説明書
==============================================================================
------------------------------------------------------------------------------
1. 概要
------------------------------------------------------------------------------

本パッケージには、T-Kernel 2.0を構成する T-Kernel/OS、T-Kernel/SM、T-Kernel/DS
のソースコードが含まれています。また、T-Monitorおよびデバイスドライバのソース
コードも含まれています。

本書では、このうちT-Kernel 2.0のソースコードに関する構築方法(ビルド方法)や構成
などについて説明します。なお、T-Monitorおよびデバイスドライバの構築方法などに
ついては、「T-Monitor構築説明書」「デバイスドライバ構築説明書」をご覧ください。

T-Kernel は、MMU を用いたメモリ管理に対応しています。ただし、実際の MMU を用い
たメモリ管理はハードウェアに依存します。T-Kernel ではメモリ管理部を取り替える
ことにより、各種ハードウェアに対応したメモリ管理が行えるようになっています。本
ソースコードには、MMU を使用せず物理メモリを管理するハードウェアに非依存なメモ
リ管理部を入れています。よって、本ソースコードのみで構築した T-Kernel上で動作
するプログラムは、物理メモリ空間で動作します。仮想メモリなどの機能は使用できま
せん。

また、物理アドレス空間での動作となりますので、ユーザプログラムは保護レベル0ま
たは保護レベル1で動かしてください。原則として保護レベル0はシステムプログラム(T
-Kernel、デバイスドライバなど)で使用しますので、通常のユーザプログラムは保護レ
ベル1で動かすことを推奨します。

T-Kernelの上位の Extension では MMU を用いた仮想メモリ管理が行われます。このよ
うな場合は、本ソースコードのメモリ管理部を Extension 用のメモリ管理部と交換す
ることにより対応することができます。メモリ管理部は、ハードウェア依存部です。

------------------------------------------------------------------------------
2. T-Kernelの構築と実機上での動作確認
------------------------------------------------------------------------------

--------------------------------------------------
2.1 T-Kernelの構築手順
--------------------------------------------------

T-Kernelを構築し、オブジェクトファイルを生成する手順を説明します。
以降、パス名中の [TARGET] は対象とするターゲットシステム(T-Engine)のディレクト
リを示します。

(1) 開発環境の準備

別途提供されるドキュメントにしたがって、開発環境をインストールし、開発環境が正
常に使用できることを確認してください。

なお、CPUによっては、開発環境で使用するGNUツールのバージョンに依存して正しく処
理できない例が報告されています。各CPUや機種に応じた情報をご確認ください。

これ以下の具体的な手順例は、Linuxのコマンドラインで開発する場合の手順例です。
Eclipseを使って開発やデバッグをする場合の手順については、「EclipseによるT-
Kernel構築説明書」eclipse_guide.txt の「3. プログラムのビルド方法」以下の説明
を参照してください。

(2) T-Kernelソースコードの準備

適当な場所にT-Kernelのソースコードを入れるディレクトリを作成し、ソースコードの
全ファイルをそこで展開します。また、展開したソースコードのトップディレクトリ
(tkernel_sourceのディレクトリ)を、環境変数 ${BD} に設定します。

以下は、/usr/local/tef_em1d/ にT-Kernelのソースコードを入れる場合の手順の例で
す。% は shell のプロンプトです。

  % cd /usr/local/tef_em1d
  % tar xvfz /XXX/YYY/tkernel_source.tar.gz
  % export BD=/usr/local/tef_em1d/tkernel_source        (bashの場合)

なお、Eclipseを使用して開発する場合は、環境変数の設定は必要ありません。

(3) T-Kernel用ライブラリの構築

lib/build/[TARGET] ディレクトリに移動します。[TARGET] は対象とするシステム名に
なります。
ここで make を実行することにより、lib/build/[TARGET] ディレクトリに各ライブラ
リ・ファイルが生成されます。

以下に手順の例を示します。

  % cd ${BD}/lib/build/tef_em1d
  % make

なお、既にこのライブラリを構築済の場合は、この手順は不要です。

(4) カーネルの構築

kernel/sysmain/build/[TARGET] ディレクトリに移動します。[TARGET] は対象とする
システム名です。
ここで make を実行することにより、kernel/sysmain/build/[TARGET] ディレクトリに
カーネルのオブジェクトファイル(kernel-rom.mot)が生成されます。

以下に手順の例を示します。

  % cd ${BD}/kernel/sysmain/build/tef_em1d
  % make

(5) 設定情報ファイル(config)の構築

config/build/[TARGET] ディレクトリに移動します。[TARGET] は対象とするシステム
名になります。
ここで make を実行することにより、config/build/[TARGET] ディレクトリにRomInfo
のオブジェクトファイル(rominfo.mot)が生成されます。

以下に手順の例を示します。

  % cd ${BD}/config/build/tef_em1d
  % make

SYSCONFおよびDEVCONFはmake時にsysconf.c、devconf.cに変換されてからコンパイルさ
れ、RomInfoのオブジェクトファイルにリンクされます。
設定情報ファイル(config)の詳細は、各機種に対応した実装仕様書などをご参照くださ
い。

  ※ パッケージに含まれているsysconf.c、devconf.cは参考用です。詳細については
     「7. config ディレクトリ」を参照してください。

--------------------------------------------------
2.2 実機上での動作確認
--------------------------------------------------

実機へのROMイメージの書き込み方法や、実機上でのT-Kernelの動作確認方法は、ハー
ドウェア(機種)に依存します。T-Engineリファレンスボード(tef_em1d)を使用した場合
の手順については、「実機への転送と動作確認手順(tef_em1d用)」target.txt を参照
してください。

------------------------------------------------------------------------------
3. ディレクトリ構成
------------------------------------------------------------------------------

--------------------------------------------------
3.1 ディレクトリ構成概要
--------------------------------------------------

本ソースコードは、複数のディレクトリより構成されています。
最上位ディレクトリは、以下の5つのディレクトリから成ります。

<ディレクトリ構成>

    kernel     T-Kernel 本体

    lib        ライブラリ
               (システムコールのインタフェース・ライブラリを含みます)

    include    各種定義ファイル(ヘッダファイル)

    config     rominfo、SYSCONF、DEVCONF

    etc        make ルール、スクリプトなど
               このディレクトリ下にはソースコードは含まれません。

--------------------------------------------------
3.2 ソースディレクトリと構築ディレクトリ
--------------------------------------------------

下位のディレクトリは、ソースディレクトリと構築ディレクトリに大別されます。
原則として、ソースディレクトリの名称は『src』、構築ディレクトリの名称は『build』
となっています。

ソースディレクトリは、ソースファイルが格納されています。
構築ディレクトリは、makeを実行し、オブジェクトファイルを作成するディレクトリで
す。構築ディレクトリには、makefile(makeルール定義ファイル)が格納されています。
また、構築されたオブジェクトファイルが格納されます。

--------------------------------------------------
3.3 ハードウェア依存部
--------------------------------------------------

本ソースコードでは、ハードウェア依存部の範囲を明確にするため、ディレクトリの単
位でソースコードを分離しています。
また、実際にアプリケーションを開発し、製品等に組み込む場合、変更が必要な部分が
あります。これはアプリケーション依存部として、ハードウェア依存部同様にディレク
トリの単位で分離し、範囲を明確にしています。

以上より、T-Kernelのソースコードは、以下の三つに分けられます。

(1) カーネル基本部

ハードウェアやアプリケーションなどに依存しない、T-Kernelとして基本的な機能を提
供する部分です。
T-Kernelの機能を改変するのではない限り、カーネル基本部を変更する必要はありませ
ん。

(2) ハードウェア依存部

T-Kernelが動作するハードウェアに依存して変更が必要な部分です。
ハードウェア依存部は,通常はハードウェア(機種)毎に用意する必要があります。また、
新しいハードウェアへの移植は、ハードウェア依存部のみの変更で可能です。

(3) アプリケーション依存部

T-Kernel上で動作するアプリケーションやExtensionなど、T-Kernelより上位のソフト
ウェアに応じて変更が必要な部分です。
アプリケーション依存部は、通常は製品毎に用意する必要があります。
本ソースコードのアプリケーション依存部は、必要最小限の機能のみが実装されていま
す。

(4) ディレクトリ構造の概要

以下にT-Kernelソース全体のディレクトリ構造図を示します。
図を見やすくするため、ソースディレクトリ(src)と構築ディレクトリ(build)の階層は
省略してあります(完全な構造図は後述)。

図中において、< >で囲まれた名称のディレクトリおよびその下位のディレクトリが、
ハードウェア依存部です。また、{ }で囲まれた名称のディレクトリおよびその下位の
ディレクトリが、アプリケーション依存部です。その他はカーネル基本部です。

また図中において、[TARGET] と記されたディレクトリは対象となるシステムのディレ
クトリに、 [CPU] と記されたディレクトリは対象となるCPUのディレクトリに置き換え
られます。

なお、一部のディレクトリの中には、_dmy という名称のファイルが入っています。こ
のファイルは、アーカイバやCVSシステムの利用を考慮し、ディレクトリが空になるこ
とを避けるために用意されたファイルです。T-Kernelの動作やコンパイル等には必要あ
りません。

  kernel                              T-Kernel 本体
  |-- sysinit                             システム初期化
  |-- tkernel                             T-Kernel/OS
  |-- sysmgr                              T-Kernel/SM
  |-- sysmain                             システムメイン
  |-- <sysdepend>                         ハードウェア依存部
  |   |-- <cpu>                              CPU依存部
  |   |   `-- [CPU]
  |   `-- <device>                           デバイス依存部
  |       `-- [TARGET]
  |-- <extension>                         Extension 関連ハードウェア依存部
  |   |-- <memory>                           メモリ管理
  |   |   `-- <nommu>                             MMU無し
  |   `-- <startup>                          Extension サブシステム初期化
  |       `-- <noext>                             Extension サブシステム無し
  |-- tstdlib                             カーネルリンク用標準ライブラリ
  |
  `-- {usermain}                          ユーザメイン

  lib                                 ライブラリ
  |-- libsvc                            T-Kernel システムコールI/Fライブラリ
  |   `-- <sysdepend>                         ハードウェア依存部
  |       |-- <include>                           共通定義ファイル
  |       `-- [CPU]
  |-- libtk                             T-Kernel 関数コールライブラリ
  |   `-- <sysdepend>                         ハードウェア依存部
  |       `-- [TARGET]
  |-- libtm                             T-Monitor サービスコールI/Fライブラリ
  |   `-- <sysdepend>                         ハードウェア依存部
  |       `-- [TARGET]
  |-- crt                               スタートアップルーチン
  |   |-- crt0                              共通スタートアップルーチン
  |   |   `-- <sysdepend>                         ハードウェア依存部
  |   |       `-- [TARGET]
  |   `-- crttk                     T-Kernelレベル・プログラム・スタートアップ
  |       `-- <sysdepend>                         ハードウェア依存部
  |            `-- [TARGET]
  `-- libstr                              文字列操作

  include                            定義ファイル
  |-- tk                                  T-Kernel関連の定義ファイル
  |   `-- <sysdepend>                         ハードウェア依存部
  |       `-- [TARGET]
  |-- sys                                 システム内部情報の定義ファイル
  |   |-- <sysdepend>                         ハードウェア依存部
  |   |   `-- [TARGET]
  |   `-- svc                                 システムコール定義
  |-- tm                                  T-Monitor関連の定義ファイル
  `-- device                              デバイスドライバ関連の定義ファイル

  config                             設定情報(RomInfo, SYSCONF, DEVCONF)
  `-- <sysdepend>                         ハードウェア依存部
       `-- [TARGET]

------------------------------------------------------------------------------
4. kernel ディレクトリ
------------------------------------------------------------------------------

kernelディレクトリは、T-Kernel本体のソースコードを格納しています。

--------------------------------------------------
4.1 ディレクトリ構造
--------------------------------------------------

kernelディレクトリは以下のディレクトリ構造となっています。

  kernel
  |-- sysinit                 システム初期化(カーネル基本部)
  |   |-- build                   構築用ディレクトリ
  |   |   `-- [TARGET]
  |   `-- src                     ソースディレクトリ
  |
  |-- tkernel                 T-Kernel/OS(カーネル基本部)
  |   |-- build                   構築用ディレクトリ
  |   |   `-- [TARGET]
  |   `-- src                     ソースディレクトリ
  |
  |-- sysmgr                  T-Kernel/SM(カーネル基本部)
  |   |-- build                   構築用ディレクトリ
  |   |   `-- [TARGET]
  |   `-- src                     ソースディレクトリ
  |
  |-- sysmain                 システムメイン(カーネル基本部)
  |   |-- build                   構築用ディレクトリ
  |   |   `-- [TARGET]         ←makeを実行するディレクトリ
  |   `-- src                     ソースディレクトリ
  |
  |-- sysdepend               ハードウェア依存部
  |   |-- cpu                     CPU依存部
  |   |   `-- [CPU]
  |   `-- device                  デバイス依存部
  |       `-- [TARGET]
  |
  |-- extension               Extension 関連ハードウェア依存部
  |   |-- memory                  メモリ管理部
  |   |   `-- nommu                   MMU無し版メモリ管理
  |   `-- startup                 Extension 関連サブシステム初期化
  |       `-- noext                   拡張サブシステム無し
  |
  |-- tstdlib                 カーネルリンク用標準ライブラリ
  |
  `-- usermain                ユーザメイン(アプリケーション依存部)

上記のディレクトリ構成中の、[TARGET] と記されたディレクトリは対象となるシステ
ムのディレクトリに、 [CPU] と記されたディレクトリは対象となるCPUのディレクトリ
に置き換えられます。

--------------------------------------------------
4.2 kernelディレクトリのカーネル基本部
--------------------------------------------------

kernel ディレクトリの中のカーネル基本部は、sysinit、tkernel、sysmgr、sysmain、
tstdlib の5つのディレクトリから構成されます。カーネル基本部のソースコードは、
各ディレクトリ中のsrcディレクトリに格納されています。

(1) sysinitディレクトリ

T-Kernel の初期化/終了処理ルーチンです。

(2) tkernelディレクトリ

T-Kernel/OS のソースコードです。

(3) sysmgrディレクトリ

T-Kernel/SM (ライブラリで実装される部分を除く)のソースコードです。

(4) sysmainディレクトリ

T-Kernel 全体の構築ディレクトリです。
sysmain/build ディレクトリ下に、構築するターゲットシステムのディレクトリを作成
し、そのディレクトリ内で make を実行することにより、T-Kernelのオブジェクトファ
イルを作成することが出来ます。

(5) tstdlibディレクトリ

T-Kernel内で使用している標準的なライブラリ関数(主にビット操作関係)のソースコー
ドです。

その他の各ディレクトリ(sysinit、tkernel、sysmgr)下の build ディレクトリは、全
体の構築の過程で使用される、各モジュール単位の構築ディレクトリです。

--------------------------------------------------
4.3 kernelディレクトリのハードウェア依存部
--------------------------------------------------

kernel ディレクトリの中のハードウェア依存部は、sysdepend、extension の2つのデ
ィレクトリから構成されます。ハードウェア依存部は、ターゲットのハードウェア、シ
ステム構成などに依存し、移植の際に変更する部分です。
以下に各ディレクトリの説明を記します。

(1) sysdependディレクトリ

ハードウェアに依存するソースコードです。以下の二つのディレクトリより構成されま
す。

  sysdepend/cpu ディレクトリ
        ターゲットシステムのCPUに依存するソースコードです。
        このディレクトリ下に、ターゲットとするCPUのディレクトリを作成し、該当
        するソースコードを格納します。

  sysdepend/device ディレクトリ
        ターゲットシステムのCPU以外のハードウェアに依存するソースコードです。
        このディレクトリ下に、ターゲットとするシステムのディレクトリを作成し、
        該当するソースコードを格納します。

CPU依存部とCPU以外のハードウェア依存部に分けているのは、同一のCPUを用いた異な
ったハードウェアのシステムへの移植を容易とする為です。CPUが同一である場合、
sysdepend/cpu以下を変更する必要はなく、sysdepend/device以下のみの変更で対応が
可能です。

(2) extensionディレクトリ

T-Kernel Standard Extension など上位のソフトウェアに関連するハードウェア依存部
です。以下の二つのディレクトリより構成されます。

  extension/memory ディレクトリ
        メモリ管理部です。メモリ管理は、MMUなどのハードウェア機能に依存し、か
        つ、プロセス管理など上位のExtensionの機能とも関連するため、他のソース
        コードから独立させています。また、このメモリ管理部を変更することにより、
        異なったメモリ管理モデルに対応することができます。
        このディレクトリ下にターゲットとするシステムのメモリ管理部のディレクト
        リを生成し、該当するソースコードを格納します。
        本ソースコードでは、MMUを使用せず実メモリのみで動作するシステムにおけ
        るメモリ管理部のソースコードを、extension/memory/nommu ディレクトリに
        格納しています。

  extension/startup ディレクトリ
        Extensionを構成するプログラムの起動/終了処理部です。主にExtensionで使
        用するサブシステムやデバイスドライバの起動/終了処理を行います。
        このディレクトリ下にターゲットとするExtensionのディレクトリを生成し、
        該当するソースコードを格納します。
        本ソースコードでは、Extensionを使用せず T-Kernelのみで動作するシステム
        におけるExtension起動/終了処理部のソースコードを、extension/startup/
        noext ディレクトリに格納しています。

--------------------------------------------------
4.4 kernelディレクトリのアプリケーション依存部
--------------------------------------------------

kernel ディレクトリの中のアプリケーション依存部は、usermain ディレクトリのみで
す。
以下に usermain ディレクトリの説明を記します。

(1) usermainディレクトリ

ユーザプログラムです。通常はここに、アプリケーションの初期タスクで実行されるプ
ログラムおよび、初期タスク生成時のパラメータを設定するためのソースコードが置か
れます。
本ソースコードでは、例として T-Monitorのモニタサービス関数を用いてコンソールに
文字を出力するだけのプログラムとなっています。

------------------------------------------------------------------------------
5. libディレクトリ
------------------------------------------------------------------------------

libディレクトリは、T-Kernelやユーザプログラムで使用されるライブラリのソースコ
ードを格納しています。

--------------------------------------------------
5.1 ディレクトリ構造
--------------------------------------------------

libディレクトリは以下のディレクトリ構造となっています。

  lib
  |-- libsvc                T-Kernel システムコールI/Fライブラリ
  |   |-- build                   構築用ディレクトリ
  |   |   `-- [CPU]
  |   `-- src                     ソースディレクトリ
  |       `-- sysdepend               ハードウェア依存部
  |           |-- include                 共通定義ファイル
  |           `-- [CPU]
  |
  |-- libtk                 T-Kernel 関数コールライブラリ
  |   |-- build                   構築用ディレクトリ
  |   |   `-- [TARGET]
  |   `-- src                     ソースディレクトリ
  |       `-- sysdepend               ハードウェア依存部
  |           `-- [TARGET]
  |
  |-- libtm                 T-MonitorサービスコールI/Fライブラリ
  |   |-- build                   構築用ディレクトリ
  |   |   `-- [TARGET]
  |   `-- src                     ソースディレクトリ
  |       `-- sysdepend               ハードウェア依存部
  |           `-- [TARGET]
  |
  |-- crt                   スタートアップルーチン
  |   |-- crt0                    共通スタートアップルーチン
  |   |   |-- build                   構築用ディレクトリ
  |   |   |   `-- [TARGET]
  |   |   `-- src                     ソースディレクトリ
  |   |       `-- sysdepend               ハードウェア依存部
  |   |            `-- [TARGET]
  |   |
  |   `-- crttk             T-Kernelレベル・プログラム・スタートアップ
  |       |-- build                   構築用ディレクトリ
  |       |   `-- [TARGET]
  |       `-- src                     ソースディレクトリ
  |           `-- sysdepend               ハードウェア依存部
  |                `-- [TARGET]
  |
  |-- libstr                文字列操作
  |   |-- build                   構築用ディレクトリ
  |   |   `-- [CPU]
  |   `-- src                     ソースディレクトリ
  |
  `-- build                 構築用ディレクトリ(全ライブラリ)
      `-- [TARGET]         ←makeを実行するディレクトリ

上記のディレクトリ構成中の、[TARGET] と記されたディレクトリは対象となるシステ
ムのディレクトリに、 [CPU] と記されたディレクトリは対象となるCPUのディレクトリ
に置き換えられます。

--------------------------------------------------
5.2 各ディレクトリ説明
--------------------------------------------------

libディレクトリ下の各ディレクトリを説明します。

(1) libsvcディレクトリ

T-Kernelのシステムコールのインタフェース・ライブラリです。
インタフェース・ライブラリはCPU毎に作成されます。src/sysdependディレクトリ下に、
ターゲットとするCPUのディレクトリを作成し、ソースコードを格納します。
build ディレクトリは、構築ディレクトリです。構築された libsvc ライブラリは、必
要に応じてユーザプログラムにリンクし使用されます。

(2) libtkディレクトリ

T-Kernelが提供する関数ライブラリです。
src ディレクトリにソースコードが格納されます。src直下のソースコードはカーネル
基本部となり、変更は不要です。ハードウェア依存部は、src/sysdependディレクトリ
下に、ターゲットとするシステムのディレクトリを作成し、そのソースコードを格納し
ます。
build ディレクトリは、構築ディレクトリです。構築された libtk ライブラリは、必
要に応じてユーザプログラムにリンクし使用されます。

(3) libtmディレクトリ

T-Monitorのシステムコールのインタフェース・ライブラリです。
src ディレクトリにソースコードが格納されます。src直下のソースコードはカーネル
基本部となり、変更は不要です。ハードウェア依存部は、src/sysdependディレクトリ
下に、ターゲットとするシステムのディレクトリを作成し、そのソースコードを格納し
ます。
build ディレクトリは、構築ディレクトリです。構築された libtm ライブラリは、必
要に応じてユーザプログラムにリンクし使用されます。

(4) crtディレクトリ

スターアップルーチンのライブラリです。以下の二つのサブディレクトリより構成され
ます。

  crt/crt0 ディレクトリ
        共通のスタートアップルーチンです。全てのユーザプログラムのスタートアッ
        プルーチンとして使用されます。

  crt/crttk ディレクトリ
        T-Kernelの機能を利用するプログラムのスタートアップルーチンです。主にデ
        バイスドライバやシステムマネージャなどのシステムプログラムのスタートア
        ップルーチンとして使用されます。

スタートアップルーチンのハードウェア依存部は、上記の各ディレクトリ下の src/
sysdepend ディレクトリ下にターゲットとするシステムのディレクトリを作成し、その
ソースコードを格納します。

(5) libstrディレクトリ

T-Kernel内およびライブラリ内で使用している標準的なライブラリ関数(主に文字列操
作関係)のソースコードです。

(6) buildディレクトリ

全ライブラリの構築用ディレクトリです。
lib/build ディレクトリ下に、構築するターゲットシステムのディレクトリを作成し、
そのディレクトリ内で make を実行することにより、全ライブラリのオブジェクトファ
イルを作成することが出来ます。

------------------------------------------------------------------------------
6. includeディレクトリ
------------------------------------------------------------------------------

includeディレクトリは、T-Kernelやユーザプログラムで使用される各種定義ファイル
(ヘッダファイル)を格納しています。
本ディレクトリ下は定義ファイルのみですので、オブジェクトは生成されません。

--------------------------------------------------
6.1 ディレクトリ構造
--------------------------------------------------

includeディレクトリは以下のディレクトリ構造となっています。

  include
  |-- tk                      T-Kernel関連の定義ファイル
  |   `-- sysdepend               ハードウェア依存部
  |       `-- [TARGET]
  |
  |-- sys                     システム内部情報の定義ファイル
  |   |-- sysdepend               ハードウェア依存部
  |   |   `-- [TARGET]
  |   `-- svc                     システムコール定義
  |
  |-- device                  デバイスドライバ関連の定義ファイル
  |
  `-- tm                      T-Monitor関連の定義ファイル

上記のディレクトリ構成中の、[TARGET] と記されたディレクトリは対象となるシステ
ムのディレクトリに置き換えられます。

--------------------------------------------------
6.2 各ディレクトリの説明
--------------------------------------------------

include ディレクトリ下の各ディレクトリを説明します。

(1) includeディレクトリ直下

include ディレクトリ直下には、共通で使用される型定義ファイルを格納しています。
include直下のファイルは、全てカーネル基本部です。

(2) tkディレクトリ

T-Kernel関連の定義ファイルを格納しています。
tk ディレクトリ直下のファイルは、カーネル基本部です。
ハードウェア依存部は、sysdepend ディレクトリ下にターゲットシステムのディレクト
リを作成して、格納されています。原則として、sysdependディレクトリ以下の定義フ
ァイルは上位の定義ファイル内より使用(include)されます。ユーザプログラムより直
接これらハードウェア依存部の定義ファイルを使用する必要はありません。

(3) sysディレクトリ

T-Kernelシステム内部の情報に関する定義ファイルを格納しています。これらのファイ
ルは、サブシステムやライブラリなどシステムプログラムの中で使用されます。通常ア
プリケーションプログラムが使用することはありません。
sysディレクトリ直下のファイルは、カーネル基本部です。
ハードウェア依存部は、sysディレクトリ下の以下の二つのディレクトリに格納されま
す。

  sys/sysdepend ディレクトリ
        システム情報のハードウェア依存部の定義ファイルです。
        sysdepend ディレクトリ下にターゲットシステムのディレクトリを作成して、
        各々の定義ファイルが格納されています。原則として、sysdependディレクト
        リ以下の定義ファイルは上位の定義ファイル内より使用(include)されます。
        ユーザプログラムより直接これらハードウェア依存部の定義ファイルを使用す
        る必要はありません。

  sys/svc ディレクトリ
        拡張SVC関連の定義ファイルです。

(4) deviceディレクトリ

デバイスドライバ関連の定義ファイルを格納しています。
このディレクトリ下のファイルはハードウェア依存部です。

(5) tmディレクトリ

T-Monitorおよびデバッグ関連の定義ファイルを格納しています。
このディレクトリ下のファイルはカーネル基本部です。

------------------------------------------------------------------------------
7. configディレクトリ
------------------------------------------------------------------------------

config ディレクトリは、T-Kernelで使用される各種設定ファイル(RomInfo、SYSCONF、
DEVCONF)を格納しています。
本ディレクトリ下のソースコードは全てハードウェア依存部です。

--------------------------------------------------
7.1 ディレクトリ構造
--------------------------------------------------

config ディレクトリは以下のディレクトリ構造となっています。

  config
  |
  |-- src                     ソースディレクトリ
  |   `--<sysdepend>              ハードウェア依存部
  |      `-- [TARGET]
  |
  `-- build                   構築用ディレクトリ
      `-- [TARGET]         ←makeを実行するディレクトリ

上記のディレクトリ構成中の、[TARGET] と記されたディレクトリは対象となるシステ
ムのディレクトリに置き換えられます。

--------------------------------------------------
7.2 各ディレクトリの説明
--------------------------------------------------

config ディレクトリ下の各ディレクトリを説明します。

(1) srcディレクトリ

T-Kernelで使用される各種設定ファイル(RomInfo、SYSCONF、DEVCONF)のソースコード
です。
全てハードウェア依存部ですので、src ディレクトリ下のsysdependディレクトリ下に、
ターゲットとするCPUのディレクトリを作成し、ソースコードを格納します。

(2) buildディレクトリ

設定ファイルの構築用ディレクトリです。
config/build ディレクトリ下に、構築するターゲットシステムのディレクトリを作成
し、そのディレクトリ内で make を実行することにより、設定ファイルのオブジェクト
ファイルを作成することが出来ます。
各機種依存部のディレクトリの下には sysconf.c, devconf.c が用意されています。こ
れらは make 実行時に自動生成されたファイルであり、直接ソースファイルとしては使
用しません。

  config/build/[TARGET]/sysconf.c ← config/src/sysdepend/[TARGET]/SYSCONF
  config/build/[TARGET]/devconf.c ← config/src/sysdepend/[TARGET]/DEVCONF

通常、sysconf.c, devconf.c は make 実行時に src ディレクトリにある SYSCONF,
DEVCONF から自動的に生成されます。
このため、設定ファイルの構築時は、一旦 make clean を実行して sysconf.c, devconf.
c を削除してから、改めて make を実行することを推奨します。
パッケージに含まれている sysconf.c, devconf.c はあくまでも参考用ですので、T-
Kernel で使用する各種設定を変更する場合は、必ず SYSCONF, DEVCONF を修正してく
ださい。もし、sysconf.c, devconf.c を直接編集して利用する場合は make clean に
よってこれらのファイルが削除されないように Makefile を変更する必要があります。
また、修正した sysconf.c, devconf.c に対して Version や Copyright を適宜追加す
るなどの管理も必要となります。扱いには十分に注意してください。

------------------------------------------------------------------------------
8. T-Kernelが使用する資源
------------------------------------------------------------------------------

--------------------------------------------------
8.1 カーネルオブジェクト
--------------------------------------------------

T-Kernelではシステム内で以下のカーネルオブジェクトを使用します。
なお、ID番号は動的に割り付けられますので、以下では、標準的な環境で起動したT-
KernelにおけるID番号を記しています。

-----------+-------+----------+--------------------------------------
    種別   |   ID  |  名 称   |            説  明
-----------+-------+----------+--------------------------------------
タスク     |   1   |  INIT    | 初期タスク
           |   2   |  SYSLOG  | syslogタスク
-----------+-------+----------+--------------------------------------
メッセージ |   1   |  SYSLOG  | syslogメッセージデータ受信用 (サイズ 6KB)
  バッファ |   2   |  DEvt    | 事象通知(サイズ1KB)
           |       |          | SYSCONFのTDEvtMbfSzで変更可
-----------+-------+----------+--------------------------------------
セマフォ   |   1   |  MemMgr  | メモリマネージャのロック制御
           |   2   |  DevSync | デバイス管理同期制御
-----------+-------+----------+--------------------------------------
イベント   |   1   |  DevMgr  | デバイス管理全体のロック制御
  フラグ   |   2   |  LibTk   | libtk全体のロック制御
-----------+-------+----------+--------------------------------------

--------------------------------------------------
8.2 サブシステム
--------------------------------------------------

T-Kernelではシステム内で以下のサブシステムを使用します。

-------+--------------------------------------
   ID  |            説  明
-------+--------------------------------------
   8   | T-Kernel/SM デバイス管理
   9   | T-Kernel/SM システム管理
  17   | セグメントマネージャ
-------+--------------------------------------

------------------------------------------------------------------------------
9. T-Kernelの起動
------------------------------------------------------------------------------

--------------------------------------------------
9.1 リセット処理およびT-Monitorの起動処理
--------------------------------------------------

システムがリセットされると、T-Monitorが起動します。T-Monitorの起動から T-
Kernelの起動までは以下の手順が実行されます。

 (1)T-Monitorはハードウェアや例外・割込みベクタ等の初期化処理を行います。この
    具体的な処理は、機種や実装に依存します。

 (2)T-Kernelのプログラムコードをメモリ上に配置します。T-Kernelをディスクからブ
    ートする場合やRAM上で動作させる場合は必要なブート処理を行います。T-Kernel
    がROM上で動作する場合は特に処理は行われません。
    この処理は、T-Monitorの実装に依存しますが、基本的には以下の手順で実行され
    ます。

        ・起動可能なディスクの有無を調べ、あった場合はディスク上のブートプログ
          ラムを実行する。
        ・起動可能なディスクが無かった場合は、ROM 情報(RomInfo)の boot_start
          プログラムを実行する。
        ・ROM情報(RomInfo)の boot_start プログラムが設定されていない場合は、T-
          Monitorで決められた処理を実行する。

 (3)T-MonitorまたはT-Monitorから実行されたブートプログラムから、T-Kernelの起動
    アドレスにジャンプし、T-Kernelに制御を移します。この時のCPUを含めたハード
    ウェアの状態は実装に依存します。基本的には、CPUの動作モードは特権モード、
    割り込みは全てマスクされた状態となります。
    これ以降、T-Kernel は、以下の場合を除きT-Monitorの機能を直接使用しません。

        ・システムの終了(tm_exitコール)
        ・異常発生時のモニタ呼び出し(tm_monitorコール)
        ・デバッグ用のログ出力(tm_putstringコール、およびtm_putcharコール)
        ・例外や割込みの発生時

    T-Kernelはシステムで定めたベクタテーブルにハンドラのベクタアドレスを設定す
    るのみであり、ハンドラの呼び出しはT-Monitorの例外/割込み処理ルーチンにて処
    理されます。

--------------------------------------------------
9.2 システムの起動情報
--------------------------------------------------

T-Kernelが起動される際に以下の情報がメモリ中に存在する必要があります。

(1) ROM情報RomInfo

ROM 上に存在するシステムの起動情報です。T-Monitor、T-Kernelで共有されます。
本情報は、ハードウェアと実装に依存します。詳細は各機種毎の実装仕様書をご覧くだ
さい。

(2) システム共有情報SysCommonInfo

T-Monitor、T-Kernelで共有されるシステムに関する情報です。
本情報の領域は RAM 上に確保され、システムの起動時に設定されます。
本情報は、ハードウェアと実装に依存します。詳細は各機種毎の実装仕様書をご覧くだ
さい。

--------------------------------------------------
9.3 T-Kernel/OSの初期化処理
--------------------------------------------------

T-Kernelの起動アドレス(START)に制御が移ると、以下の手順でT-Kernel/OSの初期化処
理が実行されます。

(1) START: C初期化ルーチン(sysdepend/device/[TARGET]/icrt0.S)

レジスタ、キャッシュ、変数領域の初期化などのプログラム実行の為の前処理が実行さ
れます。ROMからの起動の場合はROM起動初期化ルーチン ROM_startup(sysdepend/
device/[TARGET]/devinit.c)を呼び出します。本ルーチンは、ハードウェアおよび実装
に依存します。

(2) main: カーネルのメインルーチン(sysinit/src/sysinit_main.c)

T-Kernel/OSの起動処理を開始します。本処理では、カーネル初期化処理(init_system)
を呼び出した後、カーネルメイン処理(t_kernel_main)を呼びだします。カーネルメイ
ン処理からは復帰しません。

(3) init_system: カーネル初期化処理(kernel/sysinit/sysstartup.c)

カーネルの初期化処理の各ルーチンを以下の手順で呼び出していきます。この段階では
T-Kernelは起動していないので、T-Kernelのシステムコールを使用することはできませ
ん。ここで行われる初期化処理は、カーネルメモリ管理の初期化など、T-Kernel/OSが
起動する為に必要な機能の初期化処理です。

    (3-1) init_device
        デバイスの初期化(sysdepend/device/[TARGET]/devinit.c)

    (3-2) init_subsystems
        サブシステムの初期化(extension/startup/[TARGET]/subsystem.c)

    (3-3) init_segmgr
        セグメント管理の初期化(extension/memory/[TARGET]/segmgr.c)

    (3-4) init_memmgr
        メモリ管理の初期化(kernel/extension/memory/[TARGET]/memmgr.c)

    (3-5) init_Imalloc
        カーネルメモリ管理の初期化(kernel/sysmgr/imalloc.c)

(4) t_kernel_main: カーネルメイン処理(kernel/tkernel/tkstart.c)

前述の main から init_system に続いて呼び出されます。T-Kernel/OSの各機能の初期
化処理が行われ、最後に初期タスクを生成・起動します。初期タスクが生成される段階
で、T-Kernel/OSの全ての機能は有効となっています。初期タスクの起動をもって、T-
Kernel/OSの起動処理は終了します。

    (4-1) cpu_initialize
        CPU 関連初期化処理(sysdepend/cpu/[TARGET]/cpu_init.c)
        カーネル内で使用する例外ハンドラの登録、コプロ関連の設定、等の CPUに依
        存する初期化処理を実行します。

    (4-2) tkdev_initialize
        デバイス関連初期化処理(sysdepend/device/[TARGET]/tkdev_init.c)
        各デバイスの割込み禁止など、CPU以外のハードウェアに依存する初期化処理
        を実行します。

    (4-3) 各機能モジュールの初期化
        機能モジュールの初期化ルーチンを以下の順に実行します。

          task_initialize
                タスク機能の初期化(tkernel/task.c)

          semaphore_initialize
                セマフォ機能の初期化(tkernel/semaphore.c)

          eventflag_initialize
                イベントフラグ機能の初期化(tkernel/eventflag.c)

          mailbox_initialize
                メールボックス機能の初期化(tkernel/mailbox.c)

          messagebuffer_initialize
                メッセージバッファ機能の初期化(tkernel/messagebuf.c)

          rendezvous_initialize
                ランデブ機能の初期(tkernel/rendezvous.c)

          mutex_initialize
                ミューテックス機能の初期化(tkernel/mutex.c)

          memorypool_initialize
                可変長メモリプール機能の初期化(tkernel/mempool.c)

          fix_memorypool_initialize
                固定長メモリプール機能の初期化(tkernel/mempfix.c)

          cyclichandler_initialize
                周期ハンドラ機能の初期化(tkernel/time_calls.c)

          alarmhandler_initialize
                アラームハンドラ機能の初期化(tkernel/time_calls.c)

          subsystem_initialize
                サブシステム機能の初期化(tkernel/subsystem.c)

          resource_group_initialize
                リソースグループ管理の初期化(tkernel/subsystem.c)

          timer_initialize
                システムタイマの初期化(tkernel/timer.c)

    (4-4) init_task_startup
        初期タスクの生成・起動(kernel/tkernel/tkstart.c)
        初期タスクを生成し起動します。

--------------------------------------------------
9.4 初期タスクによる起動処理
--------------------------------------------------

初期タスク init_task(sysinit/sysinit_main.c)は、T-Kernel/SM等の上位のシステム
の起動処理を以下の手順で実行した後、ユーザが定義した処理に実行を移します。T-
Kernel Extensionを使用する場合は、それを起動する処理もこの中で行います。

(1) start_system: 上位システムの起動(sysinit/sysstartup.c)

T-Kernel/SM等の上位のシステム、およびデバイスドライバの起動処理を以下の手順で
実行します。本処理をもってT-Kernelの初期化・起動処理は終了します。

    (1-1) start_segmgr
        セグメント管理の起動(extension/memory/[TARGET]/segmgr.c)

    (1-2) start_memmgr
        メモリ管理の起動(extension/memory/[TARGET]/memmgr.c)

    (1-3) SystemManager
        T-Kernel/SM の起動(sysmgr/smmain.c)
        T-Kernel/SMを起動します。以降、T-Kernel/SMの機能が利用できます。

    (1-4) _InitLibtk
        ライブラリ(libtk)の初期化
        libtk ライブラリを初期化します。以降、libtkライブラリ関数を利用できま
        す。

    (1-5) start_device
        デバイスドライバの起動(sysdepend/device/[TARGET]/devinit.c)
        デバイスドライバの登録、起動を行います。

    (1-6) start_subsystem
        サブシステムの起動(extension/startup/[TARGET]/subsystem.c)
        サブシステムの登録、起動を行います。
        T-Kernel Extensionを使用する場合には、それの起動処理もここで行います。
        すなわち、Extensionで使用するサブシステムやデバイスドライバの登録を行
        います。

(2) init_task_main (sysmain/inittask_main.c)

以下の手順で、ユーザ定義のアプリケーションの処理を実行します。

    (2-1) ROMInfo->userinit
        ユーザ定義の初期化処理
        ROMInfoに設定されたユーザ定義の初期化プログラムを実行します。

    (2-2) usermain
        ユーザ定義の初期タスクメイン処理(usermain/usermain.c)
        ユーザが定義した初期タスクのメイン処理です。この処理を終了すると初期タ
        スクは終了し、T-Kernelの終了処理が始まります。

以上
